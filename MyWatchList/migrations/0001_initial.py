# Generated by Django 3.0.3 on 2020-03-11 13:02

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('originalname', models.TextField()),
                ('length', models.IntegerField()),
                ('year', models.IntegerField()),
                ('kinopoiskid', models.PositiveIntegerField()),
                ('img', models.ImageField(default='default.png', upload_to='Posters')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('episodecount', models.IntegerField()),
                ('position', models.PositiveSmallIntegerField(default=0)),
                ('img', models.ImageField(default='default.png', upload_to='Posters')),
                ('rating', models.FloatField(default=0, editable=False)),
                ('disctiption', models.TextField(default='Нет данных')),
            ],
            options={
                'ordering': ('serial__movie__name', 'position', 'name'),
            },
        ),
        migrations.CreateModel(
            name='StatusList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('color', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SeriesList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('date', models.DateField()),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MyWatchList.Season')),
            ],
        ),
        migrations.CreateModel(
            name='Serial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disctiption', models.TextField(default='Нет данных')),
                ('movie', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='serial', to='MyWatchList.Movie')),
            ],
            options={
                'ordering': ('movie__name',),
            },
        ),
        migrations.AddField(
            model_name='season',
            name='serial',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='MyWatchList.Serial'),
        ),
        migrations.AddField(
            model_name='season',
            name='status',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='MyWatchList.StatusList'),
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.FloatField(default=0, editable=False)),
                ('disctiption', models.TextField(default='Нет данных')),
                ('movie', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='film', to='MyWatchList.Movie')),
            ],
            options={
                'ordering': ('movie__name',),
            },
        ),
    ]
